<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rack-deployment-descriptors">
  <title>Rack Deployment Descriptors</title>

  <section>
    <title><filename>deploy/*-rack.yml</filename></title>

    <para>To customize some of the aspects of deployment, instead of using the
    Rake tasks, you may manually create a <emphasis>deployment
    descriptor</emphasis>. A deployment descriptor is a small text file that
    is placed in the <filename>deploy/</filename> directory of the server in
    order to have the application deployed.</para>

    <section>
      <title>Location &amp; Naming</title>

      <para>The deployment descriptor needs to be placed within the deploy/
      directory of the AS configuration in use. If you are using the default
      configuration, the path would be:</para>

      <para><filename>$JBOSS_HOME/server/default/deploy/</filename></para>

      <para>The descriptor is a YAML file, and must end with the suffix of
      <filename>-rack.yml</filename>. The prefix is arbitrary, but is usually
      some form of your application's name.</para>

      <para><filename>$JBOSS_HOME/server/default/deploy/<emphasis
      role="bold">myapp-rack.yml</emphasis></filename></para>
    </section>

    <section>
      <title>Contents of the descriptor</title>

      <para>The descriptor has 3 main sections:</para>

      <orderedlist>
        <listitem>
          <para>General application configuration</para>
        </listitem>

        <listitem>
          <para>Web-specific configuration</para>
        </listitem>

        <listitem>
          <para>Environment variables</para>
        </listitem>
      </orderedlist>

      <section>
        <title>General Application Configuration</title>

        <para>The application section describes the <envar>RACK_ROOT</envar>
        and <envar>RACK_ENV</envar> for the deployed application. Under
        traditional (mongrel, lighttpd) deployments, this information is
        picked up through the current working directory or environment
        variables. Since the TorqueBox Server runs from a different location,
        the current working directory has no meaning. Likewise, as multiple
        applications may be deployed within a single TorqueBox Server, a
        single global environment variable to set <envar>RACK_ENV</envar> is
        nonsensical.</para>

        <para><example>
            <title>Application configuration in *-rack.yml</title>

            <para><programlisting format="">application:
  RACK_ROOT: /path/to/myapp
  RACK_ENV: development</programlisting></para>
          </example></para>

        <section id="rackup">
          <title>Rackup Config File</title>

          <para>By default, the TorqueBox server will look for a rackup config
          file named <filename>config.ru</filename>. You can override the
          default name using the <emphasis>rackup</emphasis> config
          parameter.</para>

          <para><example>
              <title>Overriding the rackup config file</title>

              <para><programlisting format="">application:
  RACK_ROOT: /path/to/myapp
  RACK_ENV: development
  rackup: your_app_name.ru</programlisting></para>
            </example></para>

          <para>The <emphasis>rackup</emphasis> parameter should specify a
          filename relative to the <envar>RACK_ROOT</envar> for the
          application.</para>
        </section>
      </section>

      <section>
        <title>Web-specific configuration</title>

        <para>Traditional Rails applications are deployed individually,
        without respect to hostnames or context-path. Running under TorqueBox,
        you may host several apps under a single host, or multiple apps under
        different hostnames.</para>

        <para>Both the virtual-host and context-path configuration are nested
        under the <emphasis>web</emphasis> section.</para>

        <section>
          <title>Virtual Hosts</title>

          <para>Virtual hosts allow one application to respond to
          <emphasis>www.host-one.com</emphasis>, while another running within
          the same JBoss AS to respond to
          <emphasis>www.host-two.com</emphasis>. If no host is specified, then
          the application will respond to all requests directed at the
          TorqueBox Server.</para>

          <para><example>
              <title>Virtual host configuration in *-rack.yml</title>

              <para><programlisting format="">web:
  host: www.host-one.com</programlisting></para>
            </example></para>
        </section>

        <section>
          <title>Context paths</title>

          <para>In addition to virtual hosts, applications within a single
          TorqueBox Server may be separated purely by a <emphasis>context
          path</emphasis>. For a given host, the context path is the prefix
          used to access the application. Traditional Rails apps respond from
          the top of a site. By using a context path, you can mount
          applications at a location under the root.</para>

          <para>For example, <emphasis
          role="bold">http://www.host-one.com/app-one/</emphasis> could point
          to one application, while <emphasis
          role="bold">http://www.host-one.com/app-two/</emphasis> could point
          to another separate application.</para>

          <para><example>
              <title>Context path configuration in *-rack.yml</title>

              <para><programlisting format="">web:
  context: /app-one</programlisting></para>
            </example></para>

          <para>The context path and virtual host configurations can be used
          at the same time, if desired.</para>

          <para><example>
              <title>Virtual host with context path configuration in
              *-rack.ymls</title>

              <para><programlisting format="">web:
  host: www.mycorp.com
  context: /app-one</programlisting></para>
            </example></para>
        </section>
      </section>

      <section>
        <title>Environment variables</title>

        <para>Each Rack application may have its own unique set of environment
        variables, no matter how many different Rack apps are deployed under a
        single TorqueBox instance</para>

        <para><example>
            <title>Environment variables set in *-rack.yml</title>

            <para><programlisting format="">environment:
  MAIL_HOST: mail.yourhost.com
  REPLY_TO: you@yourhost.com</programlisting></para>
          </example></para>

        <para>Any variable set in the environment section of *-rack.yml is
        accessible from within the Rack app using the ENV hash, e.g.
        ENV['MAIL_HOST']=='mail.yourhost.com'</para>
      </section>
    </section>
  </section>
</chapter>
