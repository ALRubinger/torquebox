<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rack-deployment-descriptors">
  <title>Rack Deployment Descriptors</title>

  <section>
    <title>*-rack.yml</title>

    <para>To customize some of the aspects of deployment, instead of using the
    Rake tasks, you may manually create a <emphasis>deployment
    descriptor</emphasis>. A deployment descriptor is a small text file that
    is placed in the <filename>deploy/</filename> directory of the server in
    order to have the application deployed.</para>

    <para>The deployment descriptor serves two main purposes:</para>

    <orderedlist>
      <listitem>
        <para>Point to the actual location of the application's code to
        activate</para>
      </listitem>

      <listitem>
        <para>Provide additional application-specific deployment-time
        configuration, such as</para>

        <itemizedlist>
          <listitem>
            <para>Virtual host names</para>
          </listitem>

          <listitem>
            <para>Application "environment' (such as <code>development</code>
            or <code>production</code>)</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <section>
      <title>Location &amp; Naming</title>

      <para>The deployment descriptor needs to be placed within the
      <filename>deploy/</filename> directory of the AS configuration in use.
      If you are using the default configuration, the path would be:</para>

      <para><informalexample>
          <para><filename>$JBOSS_HOME/server/default/deploy/</filename></para>
        </informalexample></para>

      <para>The descriptor is a YAML file, and must end with the suffix of
      <filename>-rack.yml</filename>. The prefix is arbitrary, but is usually
      some form of your application's name.</para>

      <informalexample>
        <para><filename>$JBOSS_HOME/server/default/deploy/myapp-rack.yml</filename></para>
      </informalexample>
    </section>

    <section>
      <title>Contents of the descriptor</title>

      <para>The descriptor has 3 main sections:</para>

      <orderedlist>
        <listitem>
          <para>General application configuration</para>
        </listitem>

        <listitem>
          <para>Web-specific configuration</para>
        </listitem>

        <listitem>
          <para>Environment variables</para>
        </listitem>
      </orderedlist>

      <section>
        <title>General Application Configuration</title>

        <formalpara>
          <title>Location &amp; Environment</title>

          <para>The application section describes the <envar>RACK_ROOT</envar>
          and <envar>RACK_ENV</envar> for the deployed application. Under
          traditional (mongrel, lighttpd) deployments, this information is
          picked up through the current working directory or environment
          variables. Since the TorqueBox Server runs from a different
          location, the current working directory has no meaning. Likewise, as
          multiple applications may be deployed within a single TorqueBox
          Server, a single global environment variable to set
          <envar>RACK_ENV</envar> is nonsensical.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>application:
  RACK_ROOT: /path/to/myapp
  RACK_ENV: development</programlisting></para>
          </informalexample></para>

        <formalpara id="rackup">
          <title>Rackup Config File</title>

          <para>By default, the TorqueBox server will look for a rackup config
          file named <filename>config.ru</filename>. You can override the
          default name using the <emphasis>rackup</emphasis> config
          parameter.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>application:
  RACK_ROOT: /path/to/myapp
  RACK_ENV: development
  rackup: relative/path/to/your_custom_config.ru</programlisting></para>
          </informalexample></para>

        <para>The <emphasis>rackup</emphasis> parameter should specify a
        filename relative to the <envar>RACK_ROOT</envar> for the
        application.</para>
      </section>

      <section>
        <title>Web-specific configuration</title>

        <para>Traditional Rails applications are deployed individually,
        without respect to hostnames or context-path. Running under TorqueBox,
        you may host several apps under a single host, or multiple apps under
        different hostnames.</para>

        <para>Both the virtual-host and context-path configuration are nested
        under the <emphasis>web</emphasis> section.</para>

        <formalpara>
          <title>Virtual Hosts</title>

          <para>Virtual hosts allow one application to respond to
          <emphasis>www.host-one.com</emphasis>, while another running within
          the same JBoss AS to respond to
          <emphasis>www.host-two.com</emphasis>. If no host is specified, then
          the application will respond to all requests directed at the
          TorqueBox Server.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>web:
  host: www.host-one.com</programlisting></para>
          </informalexample></para>

        <formalpara>
          <title>Context paths</title>

          <para>In addition to virtual hosts, applications within a single
          TorqueBox Server may be separated purely by a <emphasis>context
          path</emphasis>. For a given host, the context path is the prefix
          used to access the application. Traditional Rails apps respond from
          the top of a site. By using a context path, you can mount
          applications at a location under the root.</para>
        </formalpara>

        <para>For example, <emphasis
        role="bold">http://www.host-one.com/app-one/</emphasis> could point to
        one application, while <emphasis
        role="bold">http://www.host-one.com/app-two/</emphasis> could point to
        another separate application.</para>

        <para><informalexample>
            <para><programlisting>web:
  context: /app-one</programlisting></para>
          </informalexample></para>

        <para>The context path and virtual host configurations can be used at
        the same time, if desired.</para>

        <para><informalexample>
            <para><programlisting>web:
  host: www.mycorp.com
  context: /app-one</programlisting></para>
          </informalexample></para>

        <formalpara>
          <title>Environment variables</title>

          <para>Each Rack application may have its own unique set of
          environment variables, no matter how many different Rack apps are
          deployed under a single TorqueBox instance</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>environment:
  MAIL_HOST: mail.yourhost.com
  REPLY_TO: you@yourhost.com</programlisting></para>
          </informalexample></para>

        <para>Any variable set in the environment section of *-rack.yml is
        accessible from within the Rack app using the ENV hash, e.g.
        ENV['MAIL_HOST']=='mail.yourhost.com'</para>
      </section>
    </section>

    <section>
      <title>Examples</title>

      <para>Below are several examples of using a *-rack.yml descriptor to
      deploy a Rack-based application.</para>

      <para>Each descriptor assumes that the directory
      <filename>/home/bob/myapp</filename> contains the Rack application we
      wish to deploy, and has the following structure:</para>

      <para><screen>/home/bob/myapp/
  config.ru
  alternatives/magic-config.ru</screen></para>

      <para>Each example descriptor is assumed to be named
      <filename>myapp-rack.yml</filename> and placed within the
      <filename>$JBOSS_HOME/server/$JBOSS_CONF/deploy/</filename> directory.
      While the TorqueBox AS does not need to be running to copy files into
      the <filename>deploy/</filename> directory, no actual deployment will
      occur until the AS is start.</para>
    </section>

    <section>
      <title>Basic myapp-rack.yml</title>

      <para><informalexample>
          <para><screen>application:
  RACK_ROOT: /home/bob/myapp
  RACK_ENV: development
web:
  context: /</screen></para>
        </informalexample></para>

      <para>This deployment descriptor points to the application under
      <filename>/home/bob/myapp</filename>, and assumes the default
      <filename>config.ru</filename> rackup script to be located at
      <filename>/home/bob/myapp/config.ru</filename>.</para>

      <para>The application is deployed without consideration of any
      virtual-host configuration, and bound to the root level of the AS. Under
      normal circumstances, you would be able to reach your application at
      <uri>http://localhost:8080/</uri>.</para>

      <para>Only a single application can be deployed against a given context
      at any given point in time. Multiple applications may overlap at
      distinct contexts, nested under each other.</para>

      <para>Additionally, multiple applications may be deployed at the same
      context path if they are differentiated by virtual host name. See the
      example below for virtual host configuration.</para>
    </section>

    <section>
      <title>Using a virtual host</title>

      <para><informalexample>
          <para><screen>application:
  RACK_ROOT: /home/bob/myapp
  RACK_ENV: development
web:
  context: /
  host: mystartup.com</screen></para>
        </informalexample></para>

      <para>This deployment descriptor works as the basic one above, but
      specifically binds this application to the hostname of
      <code>mystartup.com</code>. Another application may also be bound to the
      root context of <filename>/</filename>, as long as it has a distinct
      <parameter>host:</parameter> value.</para>
    </section>

    <section>
      <title>Using environment variables</title>

      <para><informalexample>
          <para><screen>application:
  RACK_ROOT: /home/bob/myapp
  RACK_ENV: development
web:
  context: /
environment:
  DELTACLOUD_DRIVER: ec2</screen></para>
        </informalexample>Some applications expect various configuration and
      parameters to be passed through Unix-style environment variables. In a
      shared-server environment, such as TorqueBox AS, different applications
      may wish to receive different values for the same variables. To
      accomodate this, the environment of the entire application server may be
      overriden through the environment: section.</para>

      <para>This deployment sets the DELTACLOUD_DRIVER environment variable to
      ec2 for only this application's point-of-view. The application may
      access it as it would any other environment variable.</para>

      <para><informalexample>
          <para><screen>ENV['DELTACLOUD_DRIVER'] =&gt; "ec2"</screen></para>
        </informalexample></para>
    </section>

    <section>
      <title>Using an alternate rackup file</title>

      <para><informalexample>
          <para><screen>application:
  RACK_ROOT: /home/bob/myapp
  RACK_ENV: development
  rackup: alternatives/magic-config.ru
web:
  context: /</screen></para>
        </informalexample>Given a need to use a <filename>config.ru</filename>
      style file with an atypical name or location, the
      <parameter>rackup:</parameter> configuration may be used to point to the
      correct file. It should be specified as a path relative to the
      application's root directory.</para>

      <formalpara>
        <title>Sinatra</title>

        <para>Some frameworks, such as Sinatra, provide a method for
        indicating where the application's root lives. By default, they
        consider the directory containing the rackup file to be the
        application root. If you deploy using a rackup file in a subdirectory,
        you may need to add explicit configuration to your rackup script. You
        may reference other variables in your environment, including
        <envar>RACK_ROOT</envar>.</para>
      </formalpara>

      <para><informalexample>
          <para><screen>set :root, ENV['RACK_ROOT']</screen></para>
        </informalexample></para>

      <para></para>

      <para></para>
    </section>
  </section>
</chapter>
