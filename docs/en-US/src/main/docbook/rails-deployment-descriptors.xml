<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rails-deployment-descriptors">
  <title>Rails Deployment Descriptors</title>

  <section>
    <title>*-rails.yml</title>

    <para>To customize some of the aspects of deployment, instead of using the
    Rake tasks, you may manually create a <emphasis>deployment
    descriptor</emphasis>. A deployment descriptor is a small text file that
    is placed in the <filename>deploy/</filename> directory of the server in
    order to have the application deployed.</para>

    <para>The deployment descriptor serves two main purposes:</para>

    <orderedlist>
      <listitem>
        <para>Point to the actual location of the application's code to
        activate</para>
      </listitem>

      <listitem>
        <para>Provide additional application-specific deployment-time
        configuration, such as</para>

        <itemizedlist>
          <listitem>
            <para>Virtual host names</para>
          </listitem>

          <listitem>
            <para>Application "environment' (such as <code>development</code>
            or <code>production</code>)</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <section>
      <title>Location &amp; Naming</title>

      <para>The deployment descriptor needs to be placed within the
      <filename>deploy/</filename> directory of the AS configuration in use.
      If you are using the default configuration, the path would be:</para>

      <para><informalexample>
          <para><filename>$JBOSS_HOME/server/default/deploy/</filename></para>
        </informalexample></para>

      <para>The descriptor is a YAML file, and must end with the suffix of
      <filename>-rails.yml</filename>. The prefix is arbitrary, but is usually
      some form of your application's name.</para>

      <informalexample>
        <para><filename>$JBOSS_HOME/server/default/deploy/myapp-rails.yml</filename></para>
      </informalexample>
    </section>

    <section>
      <title>Contents of the descriptor</title>

      <para>The descriptor has 3 main sections:</para>

      <orderedlist>
        <listitem>
          <para>General application configuration</para>
        </listitem>

        <listitem>
          <para>Web-specific configuration</para>
        </listitem>

        <listitem>
          <para>Environment variables</para>
        </listitem>
      </orderedlist>

      <section>
        <title>General Application Configuration</title>

        <formalpara>
          <title>Location &amp; Environment</title>

          <para>The application section describes the
          <envar>RAILS_ROOT</envar> and <envar>RAILS_ENV</envar> for the
          deployed application. Under traditional (mongrel, lighttpd)
          deployments, this information is picked up through the current
          working directory or environment variables. Since the TorqueBox
          Server runs from a different location, the current working directory
          has no meaning. Likewise, as multiple applications may be deployed
          within a single TorqueBox Server, a single global environment
          variable to set <envar>RAILS_ENV</envar> is nonsensical.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>application:
  RAILS_ROOT: /path/to/myapp
  RAILS_ENV: development</programlisting></para>
          </informalexample></para>
      </section>

      <section>
        <title>Web-specific configuration</title>

        <para>Traditional Rails applications are deployed individually,
        without respect to hostnames or context-path. Running under TorqueBox,
        you may host several apps under a single host, or multiple apps under
        different hostnames.</para>

        <para>Both the virtual-host and context-path configuration are nested
        under the <emphasis>web</emphasis> section.</para>

        <formalpara>
          <title>Virtual Hosts</title>

          <para>Virtual hosts allow one application to respond to
          <emphasis>www.host-one.com</emphasis>, while another running within
          the same JBoss AS to respond to
          <emphasis>www.host-two.com</emphasis>. If no host is specified, then
          the application will respond to all requests directed at the
          TorqueBox Server.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>web:
  host: www.host-one.com</programlisting></para>
          </informalexample></para>

        <formalpara>
          <title>Context paths</title>

          <para>In addition to virtual hosts, applications within a single
          TorqueBox Server may be separated purely by a <emphasis>context
          path</emphasis>. For a given host, the context path is the prefix
          used to access the application. Traditional Rails apps respond from
          the top of a site. By using a context path, you can mount
          applications at a location under the root.</para>
        </formalpara>

        <para>For example, <emphasis
        role="bold">http://www.host-one.com/app-one/</emphasis> could point to
        one application, while <emphasis
        role="bold">http://www.host-one.com/app-two/</emphasis> could point to
        another separate application.</para>

        <para><informalexample>
            <para><programlisting>web:
  context: /app-one</programlisting></para>
          </informalexample></para>

        <para>The context path and virtual host configurations can be used at
        the same time, if desired.</para>

        <para><informalexample>
            <para><programlisting>web:
  host: www.mycorp.com
  context: /app-one</programlisting></para>
          </informalexample></para>

        <formalpara>
          <title>Environment variables</title>

          <para>Each Rack application may have its own unique set of
          environment variables, no matter how many different Rack apps are
          deployed under a single TorqueBox instance</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>environment:
  MAIL_HOST: mail.yourhost.com
  REPLY_TO: you@yourhost.com</programlisting></para>
          </informalexample></para>

        <para>Any variable set in the environment section of *-rack.yml is
        accessible from within the Rack app using the ENV hash, e.g.
        ENV['MAIL_HOST']=='mail.yourhost.com'</para>
      </section>
    </section>

    <section>
      <title>Examples</title>

      <para>Below are several examples of using a
      <filename>*-rails.yml</filename> descriptor to deploy a Rails-based
      application.</para>

      <para>Each descriptor assumes that the directory
      <filename>/home/bob/myapp</filename> contains the Rails application we
      wish to deploy, and has the following structure:</para>

      <para><screen>/home/bob/myapp/
  config/
    environment.rb
    database.yml</screen></para>

      <para>Each example descriptor is assumed to be named
      <filename>myapp-rails.yml</filename> and placed within the
      <filename>$JBOSS_HOME/server/$JBOSS_CONF/deploy/</filename> directory.
      While the TorqueBox AS does not need to be running to copy files into
      the <filename>deploy/</filename> directory, no actual deployment will
      occur until the AS is start.</para>
    </section>

    <section>
      <title>Basic myapp-rails.yml</title>

      <para><informalexample>
          <para><screen>application:
  RAILS_ROOT: /home/bob/myapp
  RIAILS_ENV: development
web:
  context: /</screen></para>
        </informalexample></para>

      <para>This deployment descriptor points to the application under
      <filename>/home/bob/myapp</filename>. The application is deployed
      without consideration of any virtual-host configuration, and bound to
      the root level of the AS. Under normal circumstances, you would be able
      to reach your application at <uri>http://localhost:8080/</uri>.</para>

      <para>Only a single application can be deployed against a given context
      at any given point in time. Multiple applications may overlap at
      distinct contexts, nested under each other.</para>

      <para>Additionally, multiple applications may be deployed at the same
      context path if they are differentiated by virtual host name. See the
      example below for virtual host configuration.</para>
    </section>

    <section>
      <title>Using a virtual host</title>

      <para><informalexample>
          <para><screen>application:
  RAILS_ROOT: /home/bob/myapp
  RAILS_ENV: development
web:
  context: /
  host: mystartup.com</screen></para>
        </informalexample></para>

      <para>This deployment descriptor works as the basic one above, but
      specifically binds this application to the hostname of
      <code>mystartup.com</code>. Another application may also be bound to the
      root context of <filename>/</filename>, as long as it has a distinct
      <parameter>host:</parameter> value.</para>
    </section>

    <section>
      <title>Using environment variables</title>

      <para><informalexample>
          <para><screen>application:
  RAILS_ROOT: /home/bob/myapp
  RAILS_ENV: development
web:
  context: /
environment:
  AWS_PRIVAY_KEY: /path/to/my/key.pem</screen></para>
        </informalexample>Some applications expect various configuration and
      parameters to be passed through Unix-style environment variables. In a
      shared-server environment, such as TorqueBox AS, different applications
      may wish to receive different values for the same variables. To
      accomodate this, the environment of the entire application server may be
      overriden through the environment: section.</para>

      <para>This deployment sets the <envar>AWS_PRIVATE_KEY</envar>
      environment variable to <filename>/path/to/my/key.pem</filename> for
      only this application's point-of-view. The application may access it as
      it would any other environment variable.</para>

      <para><informalexample>
          <para><screen>ENV['AWS_PRIVATE_KEY'] 
=&gt; "/path/to/my/key.pem"</screen></para>
        </informalexample></para>
    </section>
  </section>

  <section>
    <title>Internal Deployment Descriptors</title>

    <para>A variety of deployment descriptors may exist within an
    application's own <filename>config/</filename> directory. Several of the
    descriptors provide a way to include deployment details directly with your
    application's codebase. Using internal deployment descriptors is useful
    when deploying your application as an all-in-one archive bundle. Internal
    deployment descriptors may completely eliminate the need for a
    <filename>*-rails.yml</filename> deployment descriptor.</para>

    <para>If an application both has internal deployment descriptors and is
    deployed using a <filename>*-rails.yml</filename> descriptor, the values
    configured within the <filename>*-rails.yml</filename> take precedence.
    This is useful when deploying an application archive, which may include
    setting <envar>RAILS_ENV</envar> to <parameter>production</parameter>,
    while locally you may wish to deploy it with <envar>RAILS_ENV</envar> of
    <parameter>development</parameter>. This may be overridden using the
    top-level <filename>*-rails.ym</filename>l described above.</para>

    <para><mediaobject>
        <imageobject role="html">
          <imagedata align="center" fileref="images/internal-external-dd.png"
                     format="PNG" />
        </imageobject>

        <imageobject role="fo">
          <imagedata align="center" fileref="images/internal-external-dd.svg"
                     format="SVG" scale="70" />
        </imageobject>
      </mediaobject></para>

    <para>Beyond providing similar functionality as a
    <filename>*-rails.yml</filename>, internal descriptors also include
    extended functionality such as messaging and scheduling integrations.
    Please see <xref linkend="messaging" /> and <xref
    linkend="scheduled-jobs" /> for further information on these additional
    descriptors.</para>

    <para>Other internal descriptors may affect the runtime environment more
    generally. Please see <xref linkend="pooling" /> for an example of
    low-level configuration of the deployment of your application within the
    TorqueBox AS.</para>

    <section>
      <title>config/rails-env.yml</title>

      <para>To set a default value for <envar>RAILS_ENV</envar> within your
      application, you may include a file named
      <filename>rails-env.yml</filename> within the application's
      <filename>config/</filename> directory. This file should only include a
      single key/value pair setting RAILS_ENV.</para>

      <para><informalexample>
          <para><programlisting>RAILS_ENV: production</programlisting></para>
        </informalexample></para>

      <para>If the application includes a <filename>rails-env.yml</filename>
      and is deployed using a <filename>*-rails.yml</filename> in the AS's
      <filename>deploy/</filename> directory, the *-rails.yml may choose not
      to specify any value for <envar>RAILS_ENV</envar>. If a value is
      specified, though, it overrides any value configured through
      <filename>config/rails-env.yml</filename>.</para>
    </section>

    <section>
      <title>config/web.yml</title>

      <para>To set default values for web-related aspects of your
      application's deploy, you may optionally include a
      <filename>web.yml</filename> file within your application's
      <filename>config/</filename> directory. This file maps exactly to the
      contents of the <code>web:</code> section of a
      <filename>*-rails.yml</filename>. Upon deployment, the aggregate
      configuration from <filename>*-rails.yml</filename> and
      <filename>config/web.yml</filename> is used, with
      <filename>*-rails.yml</filename> settings taking precedence.</para>

      <informalexample>
        <para><programlisting>context: /
host: www.mystartup.com</programlisting></para>
      </informalexample>
    </section>

    <section>
      <title>Java Deployment Descriptors</title>

      <para>In addition to Ruby, Rails and TorqueBox-specific descriptors,
      your application may also include any traditional JavaEE or
      JBoss-specific descriptors within its <filename>config/</filename>
      directory.</para>

      <section>
        <title>config/web.xml</title>

        <para>A JavaEE <filename>web.xml</filename> deployment descriptor may
        be included in your application's <filename>config/</filename>
        directory. Additional Java Servlets, Filters or other configuration
        may be performed within this file. Its contents will be mixed with
        other information when your application is deployed. If desired, your
        <filename>web.xml</filename> may reference the components that
        TorqueBox implicitly adds.</para>

        <formalpara>
          <title>Rack Filter</title>

          <para>TorqueBox provides a <productname>Java Servlet</productname>
          <classname>Filter</classname> named
          <parameter>torquebox.rack</parameter>. This filter is responsible
          for delegating requests to Rack-based applications.</para>
        </formalpara>

        <formalpara>
          <title>Static Resource Servlet</title>

          <para>In order to serve files from the <filename>public/</filename>
          directory of your application, TorqueBox installs a
          <classname>Servlet</classname> named
          <parameter>torquebox.static</parameter>.</para>
        </formalpara>
      </section>
    </section>
  </section>
</chapter>
