<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="messaging">
  <title>Messaging</title>

  <section>
    <title>Introduction</title>

    <formalpara>
      <title>HornetQ</title>

      <para>TorqueBox integrates the JBoss HornetQ message broker technology.
      It is automatically available to you, with no additional configuration
      required to start the messaging service. HornetQ supports clustered
      messaging, to allow for load-balancing, failover, and other advanced
      deployments.</para>
    </formalpara>

    <para>The term "messaging" encompasses a large area of functionality.
    Messaging solutions are used to achieve loosely-coupled, asynchronous
    systems. The primary actors in a messaging-based system are messages,
    destinations, consumers, and producers. From an implementation
    perspective, a broker mediates the relationships between the other
    actors.</para>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" contentwidth="4in"
                   fileref="images/messaging-overview.png" format="PNG" />
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" contentwidth="4in"
                   fileref="images/messaging-overview.svg" format="SVG" />
      </imageobject>
    </mediaobject>

    <formalpara>
      <title>Messages</title>

      <para>The unit of communication within a messaging system is a message.
      A message may either be simply a blob of octets, or it might have some
      higher-order, application-defined semantics. All messages include a set
      of headers, similar to email.</para>
    </formalpara>

    <formalpara>
      <title>Destinations</title>

      <para>A destination represents a rendezvous where messages are
      exchanged. A message message may be sent to a destination by one actor,
      and received from the destination by another.</para>
    </formalpara>

    <para>There are two main types of destinations:
    <emphasis>queues</emphasis> and <emphasis>topics</emphasis>. All
    destinations allow multiple actors to place messages with them. The type
    of destination affects what happens to the message once given to the
    destination. A queue delivers to the message to a single recipient
    (possibly one of many candidate recipients). A topic delivers the message
    to multiple interested recipients.</para>

    <para>In the image below, the green lines represent the flow of a single
    message from a producer to one-or-more consumers through a topic and a
    queue.</para>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" contentwidth="4in"
                   fileref="images/messaging-queues-vs-topics.png"
                   format="PNG" />
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" contentwidth="4in"
                   fileref="images/messaging-queues-vs-topics.svg"
                   format="SVG" />
      </imageobject>
    </mediaobject>

    <formalpara>
      <title>Producers</title>

      <para>Any component or client code that creates messages and gives them
      to the message broker for delivery is considered a
      <glossterm>producer</glossterm>. Generally speaking, the producer does
      not know the details of the destination.</para>
    </formalpara>

    <formalpara>
      <title>Consumers</title>

      <para>Any component that waits for messages to be delivered to it by the
      message broker is consider a <glossterm>consumer</glossterm>. A consumer
      is unaware of the producer and any other consumers, potentially.</para>
    </formalpara>
  </section>

  <section>
    <title>Deploying Destinations</title>

    <para>Queues and topics (collectively known as destinations) may be
    deployed with with your application, or separate from your application.
    Additionally, various parts of your application may also implicitly deploy
    and use some destinations.</para>

    <para>Each method has advantages and disadvantages involving the
    expectations of your application and its interaction with resources
    outside the scope of the application.</para>

    <section>
      <title>Deployment Styles</title>

      <section>
        <title>Deploying destinations with your application</title>

        <para>If you decide to deploy your queues and topics with your
        application, you automatically align their lifecycle to the deployment
        cycle of your application. If you undeploy your application, your
        queues and topics will also disappear, and be unable to receive
        messages. If the queues are used only internally to your application,
        and short lifespan semantics are useful to you, deploying destinations
        with your application reduces deployment steps and moving
        parts.</para>
      </section>

      <section>
        <title>Deploying destinations apart from your application</title>

        <para>If you deploy destinations separate and apart from your
        application, they become long-lived first-class component citizens in
        your environment. Applications may be deployed and undeployed, while
        the destinations continue to function, accepting and processing
        messages to the best of their ability.</para>

        <para>If the consumers to a destination are offline, the destination
        may persist and store any unhandled messages until a consumer
        re-attaches.</para>

        <para>The downside is that by making destinations first-class
        top-level components of your environment, you must also manage, deploy
        and undeploy them separate from any app, creating additional
        work.</para>
      </section>
    </section>

    <section>
      <title>Deployment Descriptors</title>

      <para>Deploying queues and topics is as easy as creating simple YAML
      files, and placing them either in your application's
      <filename>config/</filename> directory, or in the application server's
      <filename>deploy/</filename> directory, depending on which deployment
      style you've chosen. Both methods may be combined. Server-deployed
      destinations and application-deployed destinations are indistinguishable
      once deployed.</para>

      <section>
        <title><filename>queues.yml</filename></title>

        <para>To deploy queues, a simple YAML file is required, simply naming
        the queue, and providing additional configuration parameters.
        Currently, no additional configuration parameters are allowed.</para>

        <para><example>
            <title>queues.yml</title>

            <para><programlisting>/queues/my_queue:

/queues/my_other_queue:

</programlisting>The name of the queue will be used when registering the queue
            in the naming-service, and is used to discover the queue for
            attaching consumers and producers.</para>

            <para>By convention, queues are named with the prefix of
            <filename>/queues</filename>.</para>
          </example></para>
      </section>

      <section>
        <title><filename>topics.yml</filename></title>

        <para>To deploy topics, a simple YAML file is required, simply naming
        the topic, and providing additional configuration parameters.
        Currently, no additional configuration parameters are allowed.</para>

        <para><example>
            <title>topics.yml</title>

            <para><programlisting>/topics/my_topic:

/topics/my_other_topic:

</programlisting>The name of the queue will be used when registering the topic
            in the naming-service, and is used to discover the topic for
            attaching consumers and producers.</para>

            <para>By convention, topics are named with the prefix of
            <filename>/topics</filename>.</para>
          </example></para>
      </section>
    </section>
  </section>

  <section>
    <title>TorqueBox Ruby Classes</title>

    <para>
      All classes in the <classname>TorqueBox::Messaging</classname>
      module reside in the Ruby gem,
      <filename>org.torquebox.torquebox-messaging-client</filename>,
      so to use them in your Rails app, add this to your
      <filename>config/environment.rb</filename>:
    </para>
    <example>
      <title>To use <classname>TorqueBox::Messaging</classname> in a Rails app</title>
      <para>
        <programlisting>Rails::Initializer.run do |config|
  ...
  config.gem 'org.torquebox.torquebox-messaging-client'
  ...</programlisting>
      </para>
    </example>
    <para>
      And to use them in any other JRuby script, you would do something
      like this:
    </para>
    <example>
      <title>To use <classname>TorqueBox::Messaging</classname> in a shell script</title>
      <para>
        <programlisting>#!/usr/bin/env jruby

require 'rubygems'
require 'org.torquebox.torquebox-messaging-client'
        </programlisting>
      </para>
    </example>

    <para>
      There are two main messaging destination abstractions:
      <classname>TorqueBox::Messaging::Queue</classname> and
      <classname>TorqueBox::Messaging::Topic</classname>.  Each has a
      <methodname>publish</methodname> and a
      <methodname>receive</methodname> method, and each must be
      constructed with a <parameter>name</parameter> and an optional
      hash of options, the keys of which are as follows:
    </para>

    <table>
      <title>Message destination options</title>

      <tgroup cols="3">
        <colspec align="left" />

        <thead>
          <row>
            <entry>Option</entry>
            <entry>Default</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><parameter>:naming_host</parameter></entry>
            <entry>localhost</entry>
            <entry>Should be the hostname or ip address of the JNDI naming server containing the destination names.</entry>
          </row>
          <row>
            <entry><parameter>:naming_port</parameter></entry>
            <entry>1099</entry>
            <entry>The port of the JNDI naming server.</entry>
          </row>
          <row>
            <entry><parameter>:timeout</parameter></entry>
            <entry>0 (never)</entry>
            <entry>The amount of time to wait before giving up, in milliseconds.</entry>
          </row>
          <row>
            <entry><parameter>:ack_mode</parameter></entry>
            <entry><varname>:auto</varname></entry>
            <entry>Corresponds to one of the three <classname>javax.jms.Session</classname> modes for message delivery acknowledgement: <varname>:auto</varname>, <varname>:client</varname> and <varname>:dups_ok</varname>.</entry>
          </row>
          <row>
            <entry><parameter>:transacted</parameter></entry>
            <entry>true</entry>
            <entry>Indicates whether the underlying session is in <emphasis>transacted</emphasis> mode.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      Any options you pass to either <methodname>publish</methodname>
      or <methodname>receive</methodname> override those you passed in
      the constructor.
    </para>

    <para>
      Though sometimes convenient, these methods are fairly low-level
      and higher-level abstractions such as <link
      linkend="consumers">MessageProcessors</link> and <link
      linkend="async-tasks">Tasks</link> are often better-suited to
      the task.
    </para>

  </section>

  <section id="producers">
    <title>Ruby Producers</title>

    <para>
      It's trivial to publish a message to a JMS
      <classname>Queue</classname> or <classname>Topic</classname>
      with TorqueBox.  And if all of your message consumers are Ruby
      clients, the contents of the messages can be any serializable
      Ruby or Java object.  You just need to ensure that the type of
      content you produce resides in the runtime environments of both
      the producer and the consumer.
    </para>

    <para>
      To send a message, simply construct either a
      <classname>Topic</classname> or a <classname>Queue</classname>
      instance with its name, and then call its publish method.  The
      API's of both Topics and Queues are identical; they each simply
      represent a destination for your messages.
    </para>

    <example>
      <title>Publish text messages</title>

      <para><programlisting>queue = TorqueBox::Messaging::Queue.new('/queues/foo')
queue.publish "A text message"

topic = TorqueBox::Messaging::Topic.new('/topics/foo')
topic.publish "A text message"
      </programlisting></para>
    </example>

    <example>
      <title>Publish a Ruby Hash</title>

      <para><programlisting>queue = TorqueBox::Messaging::Queue.new('/queues/foo')
queue.publish {:key => 'value', :list => %w{one two three}}
      </programlisting></para>
      <para>This is enormously convenient, as any serializable object
      is permitted, but it only makes sense if your queue consumers
      are also written in Ruby.</para>
    </example>

    <example>
      <title>Send message using a remote JNDI server</title>

      <para><programlisting>queue = TorqueBox::Messaging::Queue.new('/queues/foo', :naming_host =&gt; 'jndi.jboss.org', :naming_port =&gt; 1099 )
queue.publish "Some message"</programlisting></para>
    </example>

  </section>

  <section id="consumers">
    <title>Ruby Consumers</title>

    <para>Message consumers may be implemented in Ruby and easily attached to
    destinations. A Ruby consumer may either interact at the lowest JMS-level,
    or take advantage of higher-level semantics.</para>

    <section>
      <title>Low-level message consumption</title>

      <para>For the lowest-level implementation of a Ruby consumer, the class
      must simply implement <function>process!(msg)</function> which receives
      a <classname>javax.jms.Message</classname> as its parameter. Admittedly,
      this gets quite a lot of Java in your Ruby, but it's available if
      needed.</para>

      <para><example>
          <title>Low-level message consumer</title>

          <para><programlisting>class MyLowConsumer
  def process!(msg)
    # manipulate the javax.jms.Message here
  end
end</programlisting></para>
        </example></para>
    </section>

    <section>
      <title>Syntactic sugar for message consumers</title>

      <para>Message consumers may extend
      <classname>TorqueBox::Messaging::MessageProcessor</classname>
      and implement an <function>on_message(body)</function> method
      which will receive the body of the JMS message.</para>

      <para><example>
          <title>MessageProcessor subclass</title>

          <para><programlisting>class MyConsumer &lt; TorqueBox::Messaging::MessageProcessor
  def on_message(body)
    # The body will be of whatever type was <link linkend="producers">published by the Producer</link>
    # the entire JMS message is available as a member variable called <function>message()</function>
  end
end</programlisting></para>

          <para>There is an accessor for the actual JMS message that is set by
          TorqueBox prior to invoking <function>on_message</function>, so it's
          there if you need it.</para>
        </example></para>
    </section>

    <section>
      <title>Connecting Consumers to Destinations (messaging.yml)</title>

      <para>You can connect consumers hosted within a TorqueBox-based
      application, or in external scripts. The method for each environment is
      similar, but slightly different, since TorqueBox-hosted consumers get
      more baked-in support from the container.</para>

      <section>
        <title>Connecting consumers within TorqueBox</title>

        <para>To connect consumers within a TorqueBox-deployed application,
        you need to create a <filename>messaging.yml</filename> file, such as
        <filename>config/messaging.yml</filename> for Rails
        applications.</para>

        <para>This file will contain the mappings from your destinations
        (topics and queues) to your consumers. The configuration file is a
        YAML hash, the keys of which are your destination names, which should
        correspond to the entries in either <filename>queues.yml</filename> or
        <filename>topics.yml</filename>.</para>

        <example>
          <title>messaging.yml</title>

          <para><programlisting>/queues/foo: MyFooHandler
/topics/baz: MyBazHandler</programlisting></para>

          <para>The classes MyFooHandler and MyBazHandler would correspond to
          files available on the load path: my_foo_handler.rb and
          my_baz_handler.rb, respectively. In a Rails app, these files would
          typically reside beneath <filename>lib/</filename> or
          <filename>app/models/</filename>.</para>
        </example>

        <para>
          The above example shows the simplest possible configuration,
          but it's possible to alter the behavior of your message
          processor using the following options:
        </para>

        <table>
          <title>Message processor options</title>

          <tgroup cols="3">
            <colspec align="left" />

            <thead>
              <row>
                <entry>Option</entry>
                <entry>Default</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><parameter>concurrency</parameter></entry>
                <entry>1</entry>
                <entry>
                  May be used to throttle the throughput of your
                  processor.  Processors are single-threaded, by
                  default, but you can increase this value to match
                  the number of concurrent messages you expect to
                  receive.
               </entry>
              </row>
              <row>
                <entry><parameter>filter</parameter></entry>
                <entry></entry>
                <entry>May be used to filter the messages dispatched to your consumer.</entry>
              </row>
              <row>
                <entry><parameter>config</parameter></entry>
                <entry></entry>
                <entry>
                  Should contain a hash of data which will be passed
                  to your consumer's
                  <function>configure(hash)</function> method prior to
                  invoking <function>process!</function>.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title><filename>messaging.yml</filename> with options set</title>

          <para><programlisting>/queues/foo:
  MyFooHandler:
    filter: "cost &gt; 30"
    config:
      type: "premium"
      season: "fall"
    concurrency: 2</programlisting></para>

          <para>Because the structure of the file is <ulink
          url="http://www.yaml.org">YAML</ulink>, proper indentation is
          required.</para>
        </example>

        <para>Actually, YAML enables the configuration to get fairly
        sophisticated, allowing you to, for example, map a single destination
        to multiple processors or re-use configuration options in multiple
        processors. You may never have a need for this much flexibility, but
        it's available if you do.</para>

        <example>
          <title>Advanced configuration in messaging.yml</title>

          <para><programlisting>/topics/simple: SimpleHandler

/topics/popular:
  - Handler
      concurrency: 5
  - Observer: &amp;defaults
      filter: "x &gt; 18"
      config:
        x: ex
        y: why
  - Processor

/queues/students:
  VerySimpleAnalyzer:
  YouthMonitor:
    filter: "y &lt; 18"
    config:
      h: ache
      i: eye
  LookAndFeel:
    &lt;&lt;: *defaults</programlisting></para>

          <para>Here we have <code>/topics/simple</code> mapped to a single
          processor of type <code>SimpleHandler</code> using a YAML
          <emphasis>string</emphasis>, <code>/topics/popular</code> mapped to
          three processors (<code>Handler</code>, <code>Observer</code>,
          <code>Processor</code>) using a YAML <emphasis>list</emphasis>, and
          <code>/queues/students</code> mapped to three more processors
          (<code>VerySimpleAnalyzer</code>, <code>YouthMonitor</code>,
          <code>LookAndFeel</code>) using a YAML <emphasis>hash</emphasis>
          where each key in the hash corresponds to the processor type. This
          example also takes advantage of YAML's ability to merge hash's: the
          <code>Observer</code> and <code>LookAndFeel</code> processors are
          configured identically.</para>
        </example>

        <section>
          <title>Connecting Consumers outside of TorqueBox</title>

          <para>To support messaging outside of TorqueBox, i.e. outside of the
          JBoss Application Server (AS), two command-line utilities are
          provided: one that can deploy your <filename>queues.yml</filename>
          (or <filename>topics.yml</filename>) and one that can deploy your
          <filename>messaging.yml</filename> config file.</para>

          <para><example>
              <title>Deploying your Consumers outside of the App
              Server</title>

              <para><programlisting>$ trq-message-processor-host --deploy messaging.yml
              </programlisting></para>

              <para>Optionally, you can pass <code>-N your.naming.host</code>
              if there's not a naming server running locally</para>
            </example></para>

          <para>Firing up the consumers doesn't do much good without the
          actual destinations, though...</para>

          <para><example>
              <title>Deploying your Destinations outside of the App
              Server</title>

              <para><programlisting>$ trq-message-broker -s --deploy queues.yml
              </programlisting></para>

              <para>The <code>-s</code> option tells the broker to fire up its
              own naming service. Otherwise, it attempts to use a local
              one.</para>
            </example></para>
        </section>
      </section>
    </section>
  </section>

  <section id="async-tasks">
    <title>Tasks</title>

    <para>A special case of message queues is to execute some task
    asynchronously, perhaps even remotely. Rails developers often want to
    spawn a potentially long-running task in response to a user request,
    without forcing the user to wait for its completion. TorqueBox makes this
    easy.</para>

    <section>
      <title>Task Classes</title>

      <para>Task classes simply extend
      <classname>TorqueBox::Messaging::Task</classname> and implement one or
      more (usually long-running) methods that take a single object payload, a
      Ruby <classname>Hash</classname>.</para>

      <para>In Rails applications, these tasks should be placed in the
      <filename>app/tasks/</filename> directory, and be named with a suffix of
      <filename>_task.rb</filename> on the file, and a suffix of
      <classname>Task</classname> on the class name.</para>

      <para>Any of the task's methods can be invoked asynchronously by calling
      the task's class method, <function>async</function>.</para>

      <para><example>
          <title>Example task class</title>

          <para><programlisting>class EmailerTask &lt; TorqueBox::Messaging::Task
  def send_welcome(payload)
    to = "#{payload[:name]} &lt;#{payload[:address]}&gt;"
    # send welcome email to the user
  end

  def send_password_reset(payload)
    email = payload[:address]
    # send password-reset email to the user
  end
end</programlisting></para>
        </example></para>
    </section>

    <section>
      <title>Invoke a task</title>

      <para>Tasks can be invoked asynchronously from within any application
      running inside TorqueBox, e.g. your Rails app.</para>

      <para><example>
          <title>Spawning a task from a Rails controller</title>

          <para><programlisting>class UserController &lt; ApplicationController
  def register
    user = User.new(params[:user])
    ...
    EmailerTask.async(:send_welcome, :address =&gt; user.email, :name =&gt; user.name)
  end
  def reset_password
    ...
    EmailerTask.async(:send_password, :address =&gt; params[:email])
  end
end</programlisting>The first parameter to the <function>async(...)</function>
          class method is a symbol indicating the method to execute
          asynchronously. Optional hash pairs comprising the payload of the
          message follow.</para>
        </example></para>
    </section>
  </section>
</chapter>
