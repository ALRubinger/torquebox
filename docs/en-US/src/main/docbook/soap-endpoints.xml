<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="soap-endpoints">
  <title>SOAP Endpoints</title>

  <section>
    <title id="soap">Introduction to SOAP &amp; Data-Binding</title>

    <para><emphasis>Simple Object Access Protocol</emphasis>, or SOAP, is one
    component of many service-oriented architecture projects. A SOAP service
    is defined using a <emphasis>Web Services Description Language</emphasis>,
    or WSDL document. The WSDL document is consumed by both the server and
    clients as the contract of communication.</para>

    <para>Clients invoke operations against the server, optionally involving
    cryptographic signatures or encryption. Servers respond to the operations
    synchronously, and produce a response document.</para>

    <para>Both the request and response documents are defined using XML Schema
    Definition language (XSD). Advanced SOAP frameworks use these document
    descriptions to provide language-native <emphasis>data-bindings</emphasis>
    to facility reading and writing these documents.</para>

    <para><mediaobject>
        <imageobject role="html">
          <imagedata fileref="images/soap-overview.png" />
        </imageobject>

        <imageobject role="fo">
          <imagedata fileref="images/soap-overview.svg" scale="80%" />
        </imageobject>
      </mediaobject></para>
  </section>

  <section>
    <title>Ruby Endpoints</title>

    <para>Ruby endpoints may only be used if you already have (or are willing
    to write) a WSDL service definition document. The Ruby endpoints
    functionality will not generate a WSDL by inspecting your class. If you do
    not already have a WSDL, we suggest you take a RESTful strategy for
    web-services.</para>

    <section>
      <title>Basic Implementation &amp; Configuration</title>

      <para>Each SOAP service is implemented as a single Ruby class. Each
      operation provided by the service maps to a similarly-named method on
      the class.</para>

      <para>In order to make SOAP service development easier, include the
      <classname>TorqueBox::Endpoints::Base</classname> module in your
      implementation.</para>

      <para><example>
          <title>Basic SOAP implementation
          <filename>amazon/ec2_endpoint.rb</filename></title>

          <para><screen><emphasis>require 'torquebox/endpoints/base'</emphasis>

module Amazon
  class Ec2Endpoint

    <emphasis>include TorqueBox::Endpoints::Base</emphasis>

    # method per operation

  end
end</screen></para>
        </example></para>

      <section>
        <title>Endpoints with Ruby-on-Rails:
        <filename><envar>$RAILS_ROOT</envar>/app/endpoints/</filename></title>

        <para>In Ruby-on-Rails applications, the
        <filename><envar>$RAILS_ROOT</envar>/app/endpoints/</filename>
        directory should contain your WSDL and your Ruby implementation
        classes.</para>
      </section>

      <section>
        <title>Configuration</title>

        <para>The implementation needs to be configured to link up the
        services it provides with particular WSDL definition and the
        operations contained within it.</para>

        <para>If the WSDL is present in the same directory, and is named the
        same as the class, minus the _endpoint suffix, it will implicitly be
        used. For example, <filename>amazon/ec2.wsdl</filename> would be used
        for <filename>amazon/ec2_endpoint.rb</filename> unless otherwise
        specified using the <parameter>wsdl_location</parameter> configuration
        parameter.</para>

        <para>Other configuration parameters include
        <parameter>target_namespace</parameter>,
        <parameter>port_name</parameter>, and <parameter>security</parameter>.
        Configuration is accomplished at the class level using an
        <methodname>endpoint_configuration</methodname> block.</para>

        <para><example>
            <title>Service configuration of a Ruby Endpoint</title>

            <screen>require 'torquebox/endpoints/base'

module Amazon
  class Ec2Endpoint

    include TorqueBox::Endpoints::Base

    <emphasis>endpoint_configuration do
      wsdl_location    'public/system/wsdl/ec2.wsdl'
      target_namespace 'http://ec2.amazonaws.com/doc/2008-12-01/'
      port_name        'AmazonEC2'
    end</emphasis>


    # method per operation

  end
end
</screen>
          </example>Security on the service may be configured using a
        <methodname>security</methodname> block within the
        <methodname>endpoint_configuration</methodname> block. The security
        block is broken into two sections: <methodname>inbound</methodname>
        and <methodname>outbound</methodname>.</para>

        <para><example>
            <title>Security configuration of a Ruby Endpoint</title>

            <para><screen>require 'torquebox/endpoints/base'

module Amazon
  class Ec2Endpoint

    include TorqueBox::Endpoints::Base

    endpoint_configuration do
      wsdl_location    'public/system/wsdl/ec2.wsdl'
      target_namespace 'http://ec2.amazonaws.com/doc/2008-12-01/'
      port_name        'AmazonEC2'

<emphasis>      security do
        inbound do
          verify_timestamp
          verify_signature
        end
      end</emphasis>

    end

    # method per operation

  end
end</screen></para>
          </example></para>

        <note>
          <para>Changes to the <methodname>endpoint_configuration</methodname>
          block are never re-parsed after your application is first deployed.
          A redeployment will be required to enable or disable security, or to
          alter the WSDL location or service bindings.</para>
        </note>

        <section>
          <title>Inbound Security</title>

          <para>Inbound security supports the follow directives:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>verify_timestamp</methodname> to verify that
              the message is timely, and not a potential reply-attach in
              progress.</para>
            </listitem>

            <listitem>
              <para><methodname>verify_signature</methodname> to verify the
              cryptographic signatures of inbound requests.</para>
            </listitem>
          </itemizedlist>

          <para>When verifying signatures, the security conduit will use the
          <link linkend="crypto-key-stores">cryptographic key store</link>
          named <classname>truststore</classname> by default. To use a
          different trust store, use the <option>truststore</option> option,
          and provide the identifier to a configured trust store.</para>

          <para><screen>security do
  inbound do
    <emphasis>truststore :my_other_truststore</emphasis>
    verify_timestamp
    verify_signature
  end
end</screen></para>
        </section>

        <section>
          <title>Outbound Security</title>

          <para>Outbound security is currently unsupported.</para>
        </section>
      </section>
    </section>

    <section>
      <title>Operation Implementation</title>

      <para>Each operation defined by the WSDL may be mapped to a method on
      the implementation class. Appropriate conversion of
      <code>camelCaseNames</code> to <code>underscored_names</code> is
      performed. For example, the operation
      <methodname>DescribeInstances</methodname> would become the method
      <methodname>describe_instances()</methodname>.</para>

      <para>This fragment of WSDL:</para>

      <para><screen>&lt;operation name="DescribeInstances"&gt;
    &lt;soap:operation soapAction="<emphasis>DescribeInstances</emphasis>" /&gt;
    ...
&lt;/operation&gt;</screen>would map to this method in the Ruby endpoint
      implementation class:</para>

      <para><screen>def <emphasis>describe_instances</emphasis>
  # imeplementation goes here
end</screen>Within each operation method, the <methodname>request</methodname>
      method provides access to the data-bound request document. See <xref
      endterm="data-binding.title" linkend="data-binding" /> for more
      information about how data-binding operates. The return value from the
      method converted to the appropriate SOAP response document and returned
      to the caller.</para>

      <para>To create an appropriate response object, the
      <methodname>create_response</methodname> factory method is available.
      The object returned matches the default response type for the called
      operation.</para>

      <para>Additionally, if security on inbound messages is enabled, and
      signature on the request has been verified, the
      <methodname>principal</methodname> method will provide access to the
      X.509 identity of the caller.</para>

      <para><screen>def describe_instances

  <emphasis>response = create_response</emphasis>

  <emphasis>request</emphasis>.instancesSet.each do |instance_id|
    log.info( "requesting information about instance #{instance_id} by #{<emphasis>principal</emphasis>}" )
    reservation_info = <emphasis>response.reservationSet.create</emphasis>
    reservation_info.ownerId = ...
  end

  <emphasis>return response</emphasis>

end</screen></para>

      <para><caution>
          <para>The entire design of the operation methods may be subject to
          change, pending input from the community. This is a tenatative
          design only.</para>
        </caution></para>
    </section>
  </section>

  <section id="data-binding">
    <title id="data-binding.title">Data-Binding</title>

    <para>Data-binding is the facility to map a data structure defined by XML
    Schema Description language into reasonable language-natural class
    definitions. It's much easier working with object trees with attributes
    than attempting to walk and produce XML documents.</para>

    <para>When the WSDL is deployed by TorqueBox, the schema within is
    analyzed and Ruby classes are generated to support data-binding. This
    allows the Ruby endpoint implementation class to work purely in terms of
    <emphasis>objects</emphasis> instead of
    <emphasis>documents</emphasis>.</para>

    <section>
      <title>Basics</title>

      <para>In general, XSD describes a straight-forward tree or graph of
      objects. Each type becomes a Ruby type, while each element becomes an
      attribute of some parent object. Primitive types, such as strings,
      booleans, or numerics are mapped to native Ruby types and
      vice-versa.</para>
    </section>

    <section>
      <title>Collections</title>

      <para>For XSD types that act purely as collections, containing
      repetition of a single element, the native Ruby Array is extended to
      provide intuitive access to the elements.</para>

      <para>For example, this schema defines a <type>DescribeKeyPairs</type>
      type, which is seen as a <type>&lt;DescribeKeyPairs&gt;</type>
      element.</para>

      <para><screen>&lt;xs:element name="DescribeKeyPairs" type="tns:DescribeKeyPairsType"/&gt;

&lt;xs:complexType name="DescribeKeyPairsType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="keySet" type="tns:DescribeKeyPairsInfoType"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;
                
&lt;xs:complexType name="DescribeKeyPairsInfoType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="item" type="tns:DescribeKeyPairsItemType" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;
                
&lt;xs:complexType name="DescribeKeyPairsItemType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="keyName" type="xs:string"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;</screen>And example XML document matching this would
      look like the following.</para>

      <para><screen>&lt;DescribeKeyPairs&gt;
  &lt;keySet&gt;
    &lt;item&gt;
      &lt;keyName&gt;key-1&lt;/keyName&gt;
    &lt;/item
    &lt;item&gt;
      &lt;keyName&gt;key-2&lt;/keyName&gt;
    &lt;/item&gt;
  &lt;/keySet&gt;
&lt;/DescribeKeyPairs&gt;</screen>Using intelligent collection data-binding,
      the <type>item</type> element is not transliterated into the Ruby class.
      The <type>&lt;keySet&gt;</type> element translates into
      <classname>Array</classname> of <type>DescribeKeyPairsItemType</type>
      objects.</para>

      <para>Navigating from a root <type>DescribeKeyPairsType</type> object to
      the key names works intuitively.</para>

      <para><screen>root.keySet.each do |item|
  puts "Describe key #{item.key}"
end</screen></para>
    </section>
  </section>
</chapter>
