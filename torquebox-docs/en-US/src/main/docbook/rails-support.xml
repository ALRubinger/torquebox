<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="rails-support">
  <title>Ruby-on-Rails Support</title>

  <para>TorqueBox provides an enterprise-grade environment that not only
  provides complete Ruby-on-Rails compatibility, but also goes beyond the
  functionality offered in traditional Rails environments.</para>

  <section id="ruby-on-rails" revision="1">
    <title>Ruby-on-Rails</title>

    <para>Ruby-on-Rails (also referred to as "RoR" or "Rails") is one of the
    most popular Model-View-Controller (MVC) frameworks for the Ruby language.
    It was originally created by David Heinemeier Hansson at <ulink
    url="http://37signals.com/">37signals</ulink> during the course of
    building many actual Ruby applications for their consulting
    business.</para>

    <para>Rails has straight-forward components representing models, views,
    and controllers. The framework as a whole values convention over
    configuration. It has been described as "opinionated software" in that
    many decisions have been taken away from the end-user.</para>

    <para>It is exactly the opinionated nature of Rails that allows it to be
    considered a simple and agile framework for quickly building web-based
    applications. Additionally, since Ruby is an interpreted language instead
    of compiled, the assets of an application can be edited quickly, with the
    results being immediately available. In most cases, the application does
    not need to be restarted to see changes in models, views or controllers
    reflected.</para>
  </section>

  <section id="intro-rails-on-torquebox" revision="1">
    <title>Rails on TorqueBox</title>

    <para>Since Ruby-on-Rails ostensibly doesn't do anything new, but simply
    does it with a different language, TorqueBox uses the power of <ulink
    url="http://jruby.org/">JRuby</ulink> to deploy regular Ruby-on-Rails apps
    within the JBoss AS appserver.</para>

    <para>Your Rails application gets deployed alongside any other WAR or EAR,
    complete with the ability to run on a cluster. The full JBoss Web stack is
    utilized to provide enterprise-grade serving for Rails applications</para>
  </section>

  <section id="preparing-your-rails-application">
    <title>Preparing your Rails application</title>

    <para>While TorqueBox is 100% compatible with Ruby-on-Rails, there are a
    few steps that must be taken to ensure success.</para>

    <section>
      <title>Freeze Rails</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Install the JDBC Gems for Database Connectivity</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Include the TorqueBox Ruby packages</title>

      <para>In order to gain access to the advanced features of TorqueBox, you
      must include the TorqueBox packages into your project.</para>

      <section>
        <title>Using Git Submodules</title>

        <para>IF you are using Git for the revision-control of your project,
        you may want to use Git's submodule facility to link the gem from the
        official repository into your project.</para>

        <para><example>
            <title>Using Git submodule for
            <filename>torquebox-gem</filename></title>

            <para><screen><prompt>$</prompt> <command>git submodule add git://github.com/torquebox/torquebox-gem.git vendor/plugins/torquebox-gem</command>
<computeroutput>Initialize vendor/plugins/torquebox-gem/.git
Initialized empty Git repository in /Users/bob/myapp/vendor/plugins/torquebox-gem/.git/
remote: Counting objects: 26, done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 26 (delta 1), reused 0 (delta 0)
Receiving objects: 100% (26/26), 7.30 KiB, done.
Resolving deltas: 100% (1/1), done.</computeroutput>
<prompt>$</prompt> <command>cd vendor/plugins/torquebox-gem</command>
<prompt>$</prompt> <command>git checkout ${project.version}</command>
<prompt>$</prompt> <command>cd ../..</command>
</screen></para>
          </example></para>

        <para>Your project will be linked to ${project.version} of
        <filename>torquebox-gem</filename>. To later update the version you're
        using with your project, simply <command>checkout</command> a new
        commit, tag or branch.</para>

        <para>You should perform the same action with the
        <code>torquebox-rails</code> package also.</para>
      </section>
    </section>

    <section>
      <title>Eliminate or replace "native" Gems</title>

      <para>"Native" gems that rely upon machine-specific compiled code do not
      function with JRuby and TorqueBox. You must replaced these gems with
      pure-Ruby or pure-Java implementations. In the future, native gems using
      the FFI facilities will be usable.</para>
    </section>

    <section>
      <title>Freeze Gems</title>

      <para>In addition to freezing the TorqueBox gems into your Rails
      project, you must freeze all other gems used by your project. The
      system-wide <envar>$GEM_PATH</envar> is ignored by the TorqueBox
      Server.</para>
    </section>
  </section>

  <section>
    <title>Scheduled Jobs</title>

    <para>Rails applications support <link linkend="scheduled-jobs">scheduled
    jobs</link> located under
    <filename>$RAILS_ROOT/app/jobs/</filename>.</para>
  </section>

  <section>
    <title>Task Queues</title>

    <para>Rails applications support <link linkend="task-queues">task
    queues</link> located under
    <filename>$RAILS_ROOT/app/queues/</filename>.</para>
  </section>

  <section>
    <title>Deploying</title>

    <para>The TorqueBox Application Server is capable of serving many
    applications simultaneously. To add your application to the server, you
    must <emphasis>deploy</emphasis> it.</para>

    <section id="deploy-using-rake" revision="1">
      <title>Deploy using the Rake tasks</title>

      <para>The TorqueBox-Rails support package includes Rake tasks to deploy
      and undeploy your application from an instance of the TorqueBox
      Server.</para>

      <para>First, the variable <envar>$JBOSS_HOME</envar> must be set to the
      path of the top of your JBoss AS5 installation.</para>

      <para><screen><prompt>$</prompt> <command>export JBOSS_HOME=/path/to/torquebox/jboss</command></screen></para>

      <para>If you're using any configuration other than
      <classname>default</classname>, you must also set
      <envar>$JBOSS_CONF</envar>.</para>

      <para><screen><prompt>$</prompt> <command>export JBOSS_CONF=web</command></screen></para>

      <para>Once these variables are set, you may perform a default deployment
      using the <command>jboss:rails:deploy</command> task.</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:rails:deploy</command></screen></para>

      <para>To undeploy your application, the jboss:rails:undeploy task is
      available</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:rails:undeploy</command></screen></para>

      <para>The TorqueBox Server does not need to be running for these
      commands to work.</para>

      <para>By default, these tasks deploy your application to root of your
      TorqueBox Server's web space, without any virtual host configuration. To
      access the application once deployed, you should use your browser to
      access <uri>http://localhost:8080/</uri>.</para>
    </section>

    <section>
      <title>Deploy using a descriptor</title>

      <para>To customize some of the aspects of deployment, instead of using
      the Rake tasks, you may manually create a <emphasis>deployment
      descriptor</emphasis>. A deployment descriptor is a small text file that
      is placed in the <filename>deploy/</filename> directory of the server in
      order to have the application deployed.</para>

      <section>
        <title>Location &amp; Naming</title>

        <para>The deployment descriptor needs to be placed within the deploy/
        directory of the AS configuration in use. If you are using the default
        configuration, the path would be:</para>

        <para><screen><filename>$TORQUEBOX_HOME/server/default/deploy/</filename></screen></para>

        <para>The descriptor is a YAML file, and must end with the suffix of
        <filename>-rails.yml</filename>. The prefix is arbitrary, but is
        usually some form of your application's name.</para>

        <para><screen><filename>$TORQUEBOX_HOME/server/default/deploy/<emphasis
                role="bold">myapp-rails.yml</emphasis></filename></screen></para>
      </section>

      <section>
        <title>Contents of the descriptor</title>

        <para>The descriptor has 2 main sections:</para>

        <orderedlist>
          <listitem>
            <para>General application configuration</para>
          </listitem>

          <listitem>
            <para>Web-specific configuration</para>
          </listitem>

          <listitem>
            <para>Sip-specific configuration</para>
          </listitem>
        </orderedlist>

        <section>
          <title>General Application Configuration</title>

          <para>The application section describes the
          <envar>RAILS_ROOT</envar> and <envar>RAILS_ENV</envar> for the
          deployed application. Under traditional (mongrel, lighttpd)
          deployments, this information is picked up through the current
          working directory or environment variables. Since the TorqueBox
          Server runs from a different location, the current working directory
          has no meaning. Likewise, as multiple applications may be deployed
          within a single TorqueBox Server, a single global environment
          variable to set <envar>$RAILS_ENV</envar> is nonsensical.</para>

          <para><example>
              <title>Application configuration in *-rails.yml</title>

              <para><screen>application:
  RAILS_ROOT: /path/to/myapp
  RAILS_ENV:  development</screen></para>
            </example></para>
        </section>

        <section>
          <title>Web-specific configuration</title>

          <para>Traditional Rails applications are deployed individually,
          without respect to hostnames or context-path. Running under
          TorqueBox, you may host several apps under a single host, or
          multiple apps under different hostnames.</para>

          <para>Both the virtual-host and context-path configuration are
          nested under the <emphasis>web</emphasis> section.</para>

          <section>
            <title>Virtual Hosts</title>

            <para>Virtual hosts allow one application to respond to
            <emphasis>www.host-one.com</emphasis>, while another running
            within the same JBoss AS to respond to
            <emphasis>www.host-two.com</emphasis>. If no host is specified,
            then the application will respond to all requests directed at the
            TorqueBox Server.</para>

            <para><example>
                <title>Virtual host configuration in *-rails.yml</title>

                <para><screen>web:
  host: www.host-one.com</screen></para>
              </example></para>
          </section>

          <section>
            <title>Context paths</title>

            <para>In addition to virtual hosts, applications within a single
            TorqueBox Server may be separated purely by a <emphasis>context
            path</emphasis>. For a given host, the context path is the prefix
            used to access the application. Traditional Rails apps respond
            from the top of a site. By using a context path, you can mount
            applications at a location under the root.</para>

            <para>For example, <emphasis
            role="bold">http://www.host-one.com/app-one/</emphasis> could
            point to one application, while <emphasis
            role="bold">http://www.host-one.com/app-two/</emphasis> could
            point to another separate application.</para>

            <para><example>
                <title>Context path configuration in *-rails.yml</title>

                <para><screen>web:
  context: /app-one</screen></para>
              </example></para>

            <para>The context path and virtual host configurations can be used
            at the same time, if desired.</para>

            <para><example>
                <title>Virtual host with context path configuration in
                *-rails.ymls</title>

                <para><screen>web:
  host: www.mycorp.com
  context: /app-one</screen></para>
              </example></para>
          </section>
        </section>

        <section>
          <title>SIP-specific configuration</title>

          <para>The sip configuration section allows you to define the appname
          (application name) of the SIP Servlets application (mandatory) and
          the name of the class that will handle the SIP messages :</para>

          <para><example>
              <title>SIP configuration in *-rails.yml</title>

              <para><screen>sip:
  appName: DummyApplication
  rubycontroller: SipHandler</screen></para>
            </example></para>
        </section>
      </section>

      <section>
        <title>Complete *-rails.yml Deployment Descriptor Example</title>

        <para><screen>application:
  RAILS_ROOT:  /path/to/myappp
  RAILS_ENV:   development
web:
  host:    www.mycorp.com
  context: /app-one
sip: 
  appName: DummyApplication
  rubycontroller: SipHandler</screen></para>
      </section>
    </section>
  </section>

  <section>
    <title>Controlling the TorqueBox Server</title>

    <section>
      <title>Using Rake</title>

      <para>To start the TorqueBox server from within your Rails application,
      the Rake task <command>torquebox:server:run</command> is
      provided.</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:server:run</command>
<computeroutput>TorqueBox Server OK: /Users/bob/oddthesis/jboss/jdk1.6/current/server/default
=========================================================================

  JBoss Bootstrap Environment</computeroutput></screen>To stop the server,
      simply interrupt the terminal using <emphasis>control-c</emphasis>.
      While the server is running, applications may be repeatedly deployed and
      undeployed.</para>
    </section>
  </section>
</chapter>
